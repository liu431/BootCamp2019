{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Perturbation Methods\n",
    "## Problem Set 3\n",
    "\n",
    "Prof. Kerk Phillips\n",
    "\n",
    "Author: Martina Fraschini"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Find the market-clearing wage rate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "w0:  [0.62736178]\n",
      "check:  [0.]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import scipy.optimize as opt\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# choose approximation point\n",
    "k0 = 5.\n",
    "\n",
    "# set value for epsilon\n",
    "eps = .01\n",
    "\n",
    "# set values for parameters\n",
    "alpha = .33\n",
    "z = 1.\n",
    "b = 2.\n",
    "t = .1\n",
    "h = 24.\n",
    "\n",
    "# define demand function\n",
    "nd = lambda w,k: (((1-alpha)*z/w)**(1/alpha)) * k\n",
    "# define profit function\n",
    "pr = lambda w,k: z * k**alpha * nd(w,k)**(1-alpha) - w*nd(w,k)\n",
    "# define supply function\n",
    "ns = lambda w,k: h - (b/(w*(1+b)))*(w*h + pr(w,k) - t)\n",
    "# define excess demand function\n",
    "excess = lambda w,k: nd(w,k) - ns(w,k)\n",
    "\n",
    "#  create anonymous function\n",
    "f = lambda w: excess(w, k0)\n",
    "\n",
    "#  use fsolve to find equlibrium wage\n",
    "w0 = opt.fsolve(f, .1)\n",
    "print ('w0: ', w0)\n",
    "\n",
    "#  check solution\n",
    "check = excess(w0, k0)\n",
    "print ('check: ', check)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Find a first-order approxmation for wage as a function of $k$ and a second-order approxmation for wage as a function of $k$. Approximate about $k = 5$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "w1:  [0.04154998]\n",
      "w2:  [-0.00557955]\n",
      "w3:  [0.00186723]\n"
     ]
    }
   ],
   "source": [
    "# define a function to compute first-order and second-order derivatives\n",
    "def Bnumdiff3(g, w0, k0, eps):\n",
    "    fA = g(w0-eps, k0+2*eps)\n",
    "    fB = g(w0, k0+2*eps)\n",
    "    fC = g(w0+eps, k0+2*eps)\n",
    "    fD = g(w0-2*eps, k0+eps)\n",
    "    fE = g(w0-eps, k0+eps)\n",
    "    fF = g(w0, k0+eps)\n",
    "    fG = g(w0+eps, k0+eps)\n",
    "    fH = g(w0+2*eps, k0+eps)\n",
    "    fI = g(w0-2*eps, k0)\n",
    "    fJ = g(w0-eps, k0)\n",
    "    fK = g(w0, k0)\n",
    "    fL = g(w0+eps, k0)\n",
    "    fM = g(w0+2*eps, k0)\n",
    "    fN = g(w0-2*eps, k0-eps)\n",
    "    fP = g(w0-eps, k0-eps)\n",
    "    fQ = g(w0, k0-eps)\n",
    "    fR = g(w0+eps, k0-eps)\n",
    "    fS = g(w0+2*eps, k0-eps)\n",
    "    fT = g(w0-eps, k0-2*eps)\n",
    "    fU = g(w0, k0-2*eps)\n",
    "    fV = g(w0+eps, k0-2*eps)\n",
    "    \n",
    "    # First-order difference\n",
    "    Fw = (fL - fJ) / (2*eps)\n",
    "    Fk = (fF - fQ) / (2*eps)\n",
    "    \n",
    "    # Second-order difference\n",
    "    Fww = (fL - 2*fK + fJ) / (eps**2)\n",
    "    Fkk = (fF - 2*fK + fQ) / (eps**2)\n",
    "    Fkw = (fG - fE - fR + fP) / (4*eps**2)\n",
    "    \n",
    "    # Third-order difference\n",
    "    Fwww = (fM - 2*fL + 2*fJ - fI) / (2*eps**3)\n",
    "    Fwwk = (fH - 2*fF - fS + fD + 2*fQ - fN) / (8*eps**3)\n",
    "    Fwkk = (fA - 2*fJ - fC + fT + 2*fL - fV) / (8*eps**3)\n",
    "    Fkkk = (fB - 2*fF + 2*fQ - fU) / (2*eps**3)\n",
    "    \n",
    "    \n",
    "    return Fw, Fk, Fww, Fkw, Fkk, Fwww, Fwwk, Fwkk, Fkkk\n",
    "\n",
    "# get derivatives from numerical differentiator\n",
    "Fw, Fk, Fww, Fkw, Fkk, Fwww, Fkww, Fkkw, Fkkk = \\\n",
    "    Bnumdiff3(excess, w0, k0, eps)\n",
    "    \n",
    "# get coefficients using perturbation formulas\n",
    "w1 = - Fk/Fw\n",
    "w2 = -(Fww*w1**2 + 2*Fkw*w1 + Fkk)/Fw\n",
    "w3 = -(Fwww*w1**3 + 3*(Fkww*w1**2 + Fkkw*w1 + Fww*w2*w1 + Fkw*w2) + Fkkk) / Fw\n",
    "\n",
    "print('w1: ', w1)\n",
    "print('w2: ', w2)\n",
    "print('w3: ', w3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set up a grid on the space between $k = 1$ and $k = 15$. Find the equilibrium value of the wage at each point on the grid and the linear and quadratic approximations. Plot the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# set up a grid\n",
    "kmin = 1\n",
    "kmax = 15\n",
    "nstep = 50\n",
    "kgrid = np.linspace(kmin, kmax, num=nstep)\n",
    "wgrid = np.zeros(nstep)\n",
    "w1grid = np.zeros(nstep)\n",
    "w2grid = np.zeros(nstep)\n",
    "w3grid = np.zeros(nstep)\n",
    "\n",
    "#  get solutions at each point on the grid\n",
    "for i in range(0, nstep):\n",
    "    # find exact solutions\n",
    "    # create anonymous function\n",
    "    f = lambda w: excess(w, kgrid[i])\n",
    "    # use fsolve to find equilibrium wage\n",
    "    wgrid[i] = opt.fsolve(f, .1)\n",
    "    # evaluate approximations \n",
    "    w1grid[i] = w0 + w1*(kgrid[i] - k0)\n",
    "    w2grid[i] = w1grid[i] + .5*w2*(kgrid[i] - k0)**2\n",
    "    w3grid[i] = w2grid[i] + (1/6)*w3*(kgrid[i]-k0)**3\n",
    "\n",
    "# plot results\n",
    "plt.plot(kgrid, wgrid, 'k-',\n",
    "         kgrid, w1grid, 'r-',\n",
    "         kgrid, w2grid, 'b-',\n",
    "         kgrid, w3grid, 'g-')\n",
    "plt.legend(['Exact', '1st', '2nd', '3rd'], loc=1)\n",
    "plt.title('Exact and Approximate Functions')\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('w')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Repeat the above exercise when the approximation point is $k = 10$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "k0 = 10.\n",
    "f = lambda w: excess(w, k0)\n",
    "w0 = opt.fsolve(f, .1)\n",
    "\n",
    "# get derivatives from numerical differentiator\n",
    "Fw, Fk, Fww, Fkw, Fkk, Fwww, Fkww, Fkkw, Fkkk = \\\n",
    "    Bnumdiff3(excess, w0, k0, eps)\n",
    "\n",
    "# get coefficients using perturbation formulas\n",
    "w1 = - Fk/Fw\n",
    "w2 = -(Fww*w1**2 + 2*Fkw*w1 + Fkk)/Fw\n",
    "w3 = -(Fwww*w1**3 + 3*(Fkww*w1**2 + Fkkw*w1 + Fww*w2*w1 + Fkw*w2) + Fkkk) / Fw\n",
    "\n",
    "# set up a grid\n",
    "kmin = 1\n",
    "kmax = 15\n",
    "nstep = 50\n",
    "kgrid = np.linspace(kmin, kmax, num=nstep)\n",
    "wgrid = np.zeros(nstep)\n",
    "w1grid = np.zeros(nstep)\n",
    "w2grid = np.zeros(nstep)\n",
    "w3grid = np.zeros(nstep)\n",
    "\n",
    "#  get solutions at each point on the grid\n",
    "for i in range(0, nstep):\n",
    "    # find exact solutions\n",
    "    # create anonymous function\n",
    "    f = lambda w: excess(w, kgrid[i])\n",
    "    # use fsolve to find equilibrium wage\n",
    "    wgrid[i] = opt.fsolve(f, .1)\n",
    "    # evaluate approximations \n",
    "    w1grid[i] = w0 + w1*(kgrid[i] - k0)\n",
    "    w2grid[i] = w1grid[i] + .5*w2*(kgrid[i] - k0)**2\n",
    "    w3grid[i] = w2grid[i] + (1/6)*w3*(kgrid[i]-k0)**3\n",
    "\n",
    "# plot results\n",
    "plt.plot(kgrid, wgrid, 'k-',\n",
    "         kgrid, w1grid, 'r-',\n",
    "         kgrid, w2grid, 'b-',\n",
    "         kgrid, w3grid, 'g-')\n",
    "plt.legend(['Exact', '1st', '2nd', '3rd'], loc=1)\n",
    "plt.title('Exact and Approximate Functions')\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('w')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The functional form of the cubic approximation is:\n",
      "y =  [47.46578754] +  [0.47108525] (x-100) + (1/2)* [-1.31865122e-05] (x-100)^2 + (1/6)* [-0.00436998] (x-100)^3\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "F = lambda x,y: ((x**.35) + .9*x - y)**(-2.5) - .95*((y**.35) + .9*y)**(-2.5)\n",
    "f = lambda y: F(x0, y)\n",
    "\n",
    "x0 = 100\n",
    "y0 = opt.fsolve(f, .1)\n",
    "eps = .01\n",
    "\n",
    "# get derivatives from numerical differentiator\n",
    "Fx, Fy, Fxx, Fxy, Fyy, Fxxx, Fxxy, Fxyy, Fyyy = \\\n",
    "    Bnumdiff3(F, x0, y0, eps)\n",
    "\n",
    "# get coefficients using perturbation formulas\n",
    "y1 = - Fx/Fy\n",
    "y2 = -(Fyy*y1**2 + 2*Fxy*y1 + Fxx)/Fy\n",
    "y3 = -(Fyyy*y1**3 + 3*(Fxyy*y1**2 + Fxxy*y1 + Fyy*y2*y1 + Fxy*y2) + Fxxx) / Fy\n",
    "\n",
    "print(\"The functional form of the cubic approximation is:\")\n",
    "print(\"y = \", y0, \"+ \", y1, \"(x-100) + (1/2)*\", y2, \"(x-100)^2 + (1/6)*\", y3, \"(x-100)^3\")\n",
    "\n",
    "# set up a grid\n",
    "xmin = 99\n",
    "xmax = 101\n",
    "nstep = 50\n",
    "xgrid = np.linspace(xmin, xmax, num=nstep)\n",
    "ygrid = np.zeros(nstep)\n",
    "y1grid = np.zeros(nstep)\n",
    "y2grid = np.zeros(nstep)\n",
    "y3grid = np.zeros(nstep)\n",
    "\n",
    "#  get solutions at each point on the grid\n",
    "for i in range(0, nstep):\n",
    "    # find exact solutions\n",
    "    # create anonymous function\n",
    "    f = lambda y: F(xgrid[i], y)\n",
    "    # use fsolve to find equilibrium wage\n",
    "    ygrid[i] = opt.fsolve(f, .1)\n",
    "    # evaluate approximations \n",
    "    y1grid[i] = y0 + y1*(xgrid[i] - x0)\n",
    "    y2grid[i] = y1grid[i] + .5*y2*(xgrid[i] - x0)**2\n",
    "    y3grid[i] = y2grid[i] + (1/6)*y3*(xgrid[i]-x0)**3\n",
    "\n",
    "# plot results\n",
    "plt.plot(xgrid, y1grid-ygrid, 'r-',\n",
    "         xgrid, y2grid-ygrid, 'b-',\n",
    "         xgrid, y3grid-ygrid, 'g-')\n",
    "plt.legend(['1st', '2nd', '3rd'], loc=1)\n",
    "plt.title('Approximation Errors')\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('w')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
